package com.lasertrac.main;
	
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Base64;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;

import org.hibernate.Session;
import org.ini4j.Ini;

import com.lasertrac.common.ConfigurationProps;
import com.lasertrac.common.IniFile;
import com.lasertrac.common.MyUtils;
import com.lasertrac.entity.HibernateUtil;
import com.lasertrac.entity.Test;
import com.lasertrac.settings.UsbRelay;
import com.lasertrac.tensor.TensorOcr;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;


public class Main extends Application {
	@Override
	public void start(Stage primaryStage) {
		try {
			BorderPane root = new BorderPane();
			Scene scene = new Scene(root,400,400);
			scene.getStylesheets().add(getClass().getResource("/com/lasertrac/css/application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void main(String[] args) {
//		Session session = HibernateUtil.getSessionFactory().openSession(); 
//        session.beginTransaction();
// 
//        Test student = new Test();
// 
//        student.setUserName("JavaFun");
//        student.setPassword("19");
//
//        session.save(student);
////        try {
////            //Thread.sleep(20000);
////        } catch (InterruptedException e) {
////            // TODO Auto-generated catch block
////            e.printStackTrace();
////        }
// 
//        session.getTransaction().commit();
        
//		String str="0103020A";
//
//		System.out.println("Great! Student was saved");
//		System.out.println(str.substring(0, 2));
//		System.out.println(str.substring(2, 4));
//		System.out.println(str.substring(4, 6));
//		System.out.println(str.substring(6, 8));
		
		//ysb relay sample
//		UsbRelay.openRelay(UsbRelay.RelayOne);
//		try {
//			IniFile ini = new IniFile(ConfigurationProps.config_file);
//			int speed = ini.readIntValue(ConfigurationProps.IniSectionAndKeys.speedLimitSection, ConfigurationProps.IniSectionAndKeys.selectedSpeedIndex);
//			System.out.println(speed);
//		}catch(Exception ex) {
//			System.out.println(ex.toString());
//		}
		
//		try {
//			String cheeni = "";
//	        
//			TensorOcr to=new TensorOcr();
//			cheeni = encodeToString(ImageIO.read(new File("C:\\Users\\LaserTrac\\Desktop\\custom\\n1\\n5.jpg")) , "JPG");
//			
//			String str = to.getOcr(cheeni);
//			System.out.println("output = " + str);
//			
//			//#2
//			System.out.println("myocr start time="+MyUtils.logTimeFormatter.format(new Date()));
//			
//			cheeni = encodeToString(ImageIO.read(new File("C:\\Users\\LaserTrac\\Desktop\\custom\\n1\\n6.jpg")) , "JPG");
//			String str1 = to.getOcr(cheeni);
//			System.out.println("output = " + str1);
//			
//			System.out.println("myocr start time="+MyUtils.logTimeFormatter.format(new Date()));
//			
//			System.out.println("-------------");
//			//#3
//			System.out.println("myocr start time="+MyUtils.logTimeFormatter.format(new Date()));
//			
//			cheeni = encodeToString(ImageIO.read(new File("C:\\Users\\LaserTrac\\Desktop\\custom\\n1\\np(1).jpg")) , "JPG");
//			str1 = to.getOcr(cheeni);
//			System.out.println("output = " + str1);
//			
//			System.out.println("myocr start time="+MyUtils.logTimeFormatter.format(new Date()));
//			
//		}catch(Exception ex) {
//			System.out.println("error = "+ex.getMessage());
//		}
		//startAutoEvidence();
		checkExecutors();
		launch(args);
	}
	
	static int count=0;
	private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
	static void checkExecutors() {
		final Runnable beeper = new Runnable() {
	            public void run() { 
	            	int mcount= count;
	            	System.out.println(mcount+" beep "+MyUtils.logTimeFormatter.format(new Date()).toString()); 
	            	try {
	            		Thread.sleep(300);	
	            	}catch(Exception ex) {
	            		
	            	}
	            	System.out.println(mcount+" beep ends "+MyUtils.logTimeFormatter.format(new Date()).toString()); 
	            	
	            	count+=1;
	            }
	    };
	    final ScheduledFuture<?> beeperHandle = scheduler.scheduleAtFixedRate(beeper, 100, 200, TimeUnit.MILLISECONDS);

	    //stop schedule 
	    //scheduler.schedule(new Runnable() {
	    	//public void run() { beeperHandle.cancel(true); }
	    //}, 1000, TimeUnit.MILLISECONDS);
		
	}
	
	static void startAutoEvidence() {
		Timeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.millis(200), new EventHandler<ActionEvent>() {
    		int count=0;
    	    @Override
    	    public void handle(ActionEvent event) {
    	    	System.out.println(count+" hello world = "+MyUtils.logTimeFormatter.format(new Date()).toString());
//    	    	Runnable r = new Runnable() {
//    				public void run() {
//    					processImage();
//    				}
//    			};
//    	 
//    			Thread t = new Thread(r);
//    			t.start();
    	    	try {
    	    		Thread.sleep(400);	
    	    	}catch(Exception ex) {
    	    		
    	    	}
    	    	
    	    	
    	    	System.out.println(count+" hello world ends = "+MyUtils.logTimeFormatter.format(new Date()).toString());
    	    		
    	    	count += 1;
    	    	
    	    	
    	    }
    	}));
    	fiveSecondsWonder.setCycleCount(Timeline.INDEFINITE);
    	fiveSecondsWonder.play();
		
	}
	
	public static String encodeToString(BufferedImage image, String type) {
	    String imageString = "";
	    ByteArrayOutputStream bos = new ByteArrayOutputStream();

	    try {
	        ImageIO.write(image, type, bos);
	        byte[] imageBytes = bos.toByteArray();

	        Base64.Encoder encoder = Base64.getEncoder();
	        imageString = encoder.encodeToString(imageBytes);

	        bos.close();
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	    return imageString;
	}
	
}
